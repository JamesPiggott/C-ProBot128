#line 1 "C:\Sommer\C-Control-Pro\C-CONTROL PRO PRODUKTE\PRO-BOT128\Product-Data\Product CD V1.2\PRO-BOT128 Systemtest\Batterie - Check\Batterie_Check.inc"
#pragma Thread "0,0,5000"
#pragma Thread "1,0,0"
#pragma Thread "2,0,0"
#pragma Thread "3,0,0"
#pragma Thread "4,0,0"
#pragma Thread "5,0,0"
#pragma Thread "6,0,0"
#pragma Thread "7,0,0"
#pragma Thread "8,0,0"
#pragma Thread "9,0,0"
#pragma Thread "10,0,0"
#pragma Thread "11,0,0"
#pragma Thread "12,0,0"
#pragma Thread "13,0,0"
#pragma IPLen "25626"
#pragma Chip "MEGA128"

#pragma Options "0"


#pragma CompLang "LANG_GER"


#pragma Language "CompactC" "null"
#xline 0 "C:\C-Control-Pro\Libraries\IntFunc_Lib.cc"

void AbsDelay               $opc(0x00)(word val);
void Port_DataDir           $opc(0x01)(byte port,byte val);
void Port_Write             $opc(0x02)(byte port,byte val);
byte Port_Read              $opc(0x03)(byte port);




word Timer_T1GetCNT         $opc(0x06)(void);
void Timer_T1CNT            $opc(0x07)(void);
void Timer_T1CNT_Int        $opc(0x08)(word limit);
void Timer_T0Start          $opc(0x09)(byte prescaler);
void Timer_T0Stop           $opc(0x0A)(void);
void Timer_T0FRQ            $opc(0x0B)(byte Period,byte PS);
void Timer_T0PWM            $opc(0x0C)(byte PW,byte PS);
void Timer_T0PW             $opc(0x0D)(byte PW);
void Timer_T1Start          $opc(0x0E)(byte prescaler);
void Timer_T1Stop           $opc(0x0F)(void);
void Timer_T1FRQ            $opc(0x10)(word Period,byte PS);
void Timer_T1FRQX           $opc(0x11)(word Period,word skew,byte PS);
void Timer_T1PWM            $opc(0x12)(word Period,word PW0,byte PS);
void Timer_T1PWA            $opc(0x13)(word PW0);
void Timer_T1PWMX           $opc(0x14)(word Period,word PW0,word PW1,byte PS);
void Timer_T1PWB            $opc(0x15)(word PW1);
void LCD_SubInit            $opc(0x16)(void);
word Key_Scan               $opc(0x17)(void);
void LCD_WriteRegister      $opc(0x18)(byte x,byte c);
byte LCD_TestBusy           $opc(0x19)(void);
word ADC_Read               $opc(0x1A)(void);
word ADC_ReadInt            $opc(0x1B)(void);
void ADC_Set                $opc(0x1C)(byte v_ref,byte channel);
void ADC_SetInt             $opc(0x1D)(byte v_ref,byte channel);
void ADC_StartInt           $opc(0x1E)(void);
void ADC_Disable            $opc(0x1F)(void);
void Msg_WriteChar          $opc(0x20)(char c);
void Msg_WriteInt           $opc(0x21)(int val);
void Msg_WriteWord          $opc(0x22)(word val);
void Msg_WriteHex           $opc(0x23)(word val);
void I2C_Init               $opc(0x24)(byte I2C_BR);
void I2C_Start              $opc(0x25)(void);
void I2C_Stop               $opc(0x26)(void);
void I2C_Write              $opc(0x27)(byte data);
byte I2C_Read_ACK           $opc(0x28)(void);
byte I2C_Read_NACK          $opc(0x29)(void);
byte I2C_Status             $opc(0x2A)(void);
void Port_DataDirBit        $opc(0x2B)(byte portbit,byte val);
void Port_WriteBit          $opc(0x2C)(byte portbit,byte val);
byte Port_ReadBit           $opc(0x2D)(byte portbit);
void Serial_Write           $opc(0x2E)(byte serport,byte val);
byte Serial_Read            $opc(0x2F)(byte serport);
void Serial_Init            $opc(0x30)(byte serport,byte par,word divider);
word Serial_ReadExt         $opc(0x31)(byte serport);
void Timer_Disable          $opc(0x32)(byte timer);
void Irq_SetVect            $opc(0x33)(byte irqnr,float vect);
byte Irq_GetCount           $opc(0x34)(byte irqnr);
void Thread_Start           $opc(0x35)(byte thread,float func);
void Thread_Kill            $opc(0x36)(byte thread);
void EEPROM_Write           $opc(0x37)(word pos,byte val);
byte EEPROM_Read            $opc(0x38)(word pos);
void Timer_T0Time           $opc(0x39)(byte Time, byte PS);
void Timer_T1Time           $opc(0x3A)(word Time, byte PS);
void Timer_T1PM             $opc(0x3B)(byte Mode, byte PS);
word Timer_T1GetPM          $opc(0x3C)(void);
byte AComp                  $opc(0x3D)(byte BG);
void Ext_IntEnable          $opc(0x3E)(byte IRQ,byte Mode);
void Ext_IntDisable         $opc(0x3F)(byte IRQ);
void Thread_Delay           $opc(0x40)(word delay);
void Thread_Lock            $opc(0x41)(byte lock);
void Thread_Wait            $opc(0x42)(byte Thread, byte signal);
void Thread_Resume          $opc(0x43)(byte thread);
void Thread_Signal          $opc(0x44)(byte signal);
void Thread_Cycles          $opc(0x45)(byte thread, word cycles);

float sqrt                  $opc(0x46)(float val);
float floor                 $opc(0x47)(float val);
float ceil                  $opc(0x48)(float val);
float ldexp                 $opc(0x49)(float val,int expn);
float fabs                  $opc(0x4A)(float val);
float ln                    $opc(0x4B)(float val);
float log                   $opc(0x4C)(float val);
float sin                   $opc(0x4D)(float val);
float asin                  $opc(0x4E)(float val);
float cos                   $opc(0x4F)(float val);
float acos                  $opc(0x50)(float val);
float tan                   $opc(0x51)(float val);
float atan                  $opc(0x52)(float val);
float pow                   $opc(0x53)(float x,float y);
float exp                   $opc(0x54)(float val);

void Msg_WriteText          $opc(0x55)(char text[]);
void Serial_WriteText       $opc(0x56)(byte serport,char text[]);
void Str_WriteInt           $opc(0x57)(int n,char text[],word offset);
void Str_WriteFloat         $opc(0x58)(float n,byte decimal,char text[],word offset);
word Str_Len                $opc(0x59)(char text[]);
void Str_Copy               $opc(0x5A)(char dest[],char source[],word offset);
char Str_Comp               $opc(0x5B)(char str1[],char str2[]);
void Msg_WriteFloat         $opc(0x5C)(float val);
void Str_WriteWord          $opc(0x5D)(word n,byte base,char text[],word offset,byte minwidth);
word Thread_Info            $opc(0x5E)(byte info);
word Thread_MemFree         $opc(0x5F)(void);
void SPI_Disable            $opc(0x60)(void);
void Serial_Disable         $opc(0x61)(byte serport);

word Timer_T3GetCNT         $opc(0x62)(void);
void Timer_T3CNT            $opc(0x63)(void);
void Timer_T3CNT_Int        $opc(0x64)(word limit);
void Timer_T3Start          $opc(0x65)(byte PS);
void Timer_T3Stop           $opc(0x66)(void);
void Timer_T3FRQ            $opc(0x67)(word Period,byte PS);
void Timer_T3FRQX           $opc(0x68)(word Period,word skew,byte PS);
void Timer_T3PWM            $opc(0x69)(word Period,word PW0,byte PS);
void Timer_T3PWA            $opc(0x6A)(word PW0);
void Timer_T3PWMX           $opc(0x6B)(word Period,word PW0,word PW1,byte PS);
void Timer_T3PWMY           $opc(0x6C)(word Period,word PW0,word PW1,word PW2,byte PS);
void Timer_T3PWB            $opc(0x6D)(word PW1);
void Timer_T3Time           $opc(0x6E)(word Time, byte PS);
void Timer_T3PM             $opc(0x6F)(byte Mode, byte PS);
word Timer_T3GetPM          $opc(0x70)(void);
void Timer_T1PWMY           $opc(0x71)(word Period,word PW0,word PW1,word PW2,byte PS);

word Timer_TickCount        $opc(0x72)(void);
void Serial_Init_IRQ        $opc(0x73)(byte serport,byte ramaddr[],byte recvfifolen,byte sendfifolen,byte par,word divider);
byte Serial_IRQ_Info        $opc(0x74)(byte serport,byte info);
word EEPROM_ReadWord        $opc(0x75)(word pos);
float EEPROM_ReadFloat      $opc(0x76)(word pos);
void EEPROM_WriteWord       $opc(0x77)(word pos,word val);
void EEPROM_WriteFloat      $opc(0x78)(word pos,float val);
byte OneWire_Reset          $opc(0x79)(byte pin);
void OneWire_Write          $opc(0x7A)(byte data);
byte OneWire_Read           $opc(0x7B)(void);
byte SPI_Read               $opc(0x7C)(void);
void SPI_Write              $opc(0x7D)(byte data);
void SPI_ReadBuf            $opc(0x7E)(byte buf[], byte length);
void SPI_WriteBuf           $opc(0x7F)(byte buf[], byte length);
void SPI_Enable             $opc(0x80)(byte ctrl);

float round                 $opc(0x81)(float val);

void Sleep				 	$opc(0x82)(byte ctrl);
void Clock_Set_Time		 	$opc(0x83)(byte hour, byte min, byte sec, int corr);
void Clock_Set_Date		 	$opc(0x84)(byte day, byte mon, byte year);
byte Clock_Get_Val		 	$opc(0x85)(byte indx);
void Port_Toggle		 	$opc(0x86)(byte port);
void Port_ToggleBit		 	$opc(0x87)(byte portbit);
byte DirAcc_Read	   	    $opc(0x88)(byte reg);
void DirAcc_Write		 	$opc(0x89)(byte reg, byte val);
void RC5_Init               $opc(0x8A)(byte	pin);
void RC5_Write              $opc(0x8B)(word data);
word RC5_Read               $opc(0x8C)(void);




































                                        































































































































































#pragma Language "CCBasic" "null"
#xline 0 "C:\Sommer\C-Control-Pro\C-CONTROL PRO PRODUKTE\PRO-BOT128\Product-Data\Product CD V1.2\PRO-BOT128 Systemtest\Batterie - Check\Batterie_Check.cbas"
















Dim Text(9) As Char
Dim Volt As Single


Sub main()


    Do While 1                      

        Batterie_Check()            
        Msg_WriteFloat(Volt)        
        Text = " Volt"              
        Msg_WriteText(Text)         
        Msg_WriteChar(13)           
        AbsDelay(1000)              

    End While

End Sub


Sub Batterie_Check()
    Dim ADC_RAW As Word             
    Dim Ref As Single               
    Ref = 2.56/1023.0               
    ADC_RAW = GetAdc(0)             
    Volt = ADC_RAW * Ref            
    Volt = Volt * 2.08              
End Sub



Sub GetAdc(Channel As Byte) As Word
    
    ADC_Set(0xC0               ,Channel)
    Return ADC_Read()
End Sub
